--liquibase formatted sql

--changeset moshchev:20180428190000 dbms:oracle runOnChange:true stripComments:false splitStatements:false endDelimiter: /
--comment: proc_servers_with_backup

create or replace procedure proc_servers_with_backup
is
  BEGIN
    DECLARE
      --
      --TYPES
      --
      type t_metric_rec is record
      (
      label         varchar2(200 char),
      countMetric   varchar2(50  char),
      fromTable     varchar2(100 char),
      whereClause   varchar2(400 char),
      reportDate    date
      );
      type t_metric_tab is table of t_metric_rec index by pls_integer;


    --
    --DEFINITIONS
    --
    v_storedate      DATE;
    query_body       CLOB;
    data_discr_query CLOB;
    overall_success_rate_query CLOB;

    -- when adding new database source, add new date!
    server_date      date;

    metric_server t_metric_tab;
    -- SOURCE constants
    srcUnifiedBck   constant    varchar2(100 char)  :=  'mview_srv_app_unified_backups';
    srcNonStandard  constant    varchar2(100 char)  :=  'mview_non_standard_servers';

    procedure process_metrics(metric_array t_metric_tab) is
      metric_idx pls_integer;

    begin
      metric_idx := metric_array.first;
      loop
      exit when metric_idx is null;
      query_body :=   'insert into SERVER_WITH_BACKUPS_BY_ENV( labelid, numericvalue, report_date,  environment, business_class,gxp)' ||
                      '(select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, utils.env(server_system_role) as environment, business_criticality,lower(gxp_ind) from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by business_criticality,gxp_ind, server_system_role
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, ''all'' as environment, business_criticality,lower(gxp_ind) from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by business_criticality,gxp_ind
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date,utils.env(server_system_role) as environment, ''all'' as business_criticality,lower(gxp_ind) from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by gxp_ind,server_system_role
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, utils.env(server_system_role) as environment, business_criticality,''all'' as gxp_ind from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by business_criticality,server_system_role
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, ''all'' as environment, ''all'' as business_criticality,lower(gxp_ind) from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by gxp_ind
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, ''all'' as environment, business_criticality,''all'' as gxp_ind from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by business_criticality
                    union
                      select ''' || metric_array(metric_idx).label || ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date,  utils.env(server_system_role) as environment, ''all''  as business_criticality,''all'' as gxp_ind from '|| metric_array(metric_idx).fromTable ||' '|| metric_array(metric_idx).whereClause ||
                      ' group by server_system_role
                    union
                      select ''' || metric_array(metric_idx).label ||
                      ''' as label,count(distinct server_name) as totalcount,TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') as report_date, ''all'' as environment, ''all'' business_criticality,''all'' as gxp_ind from '|| metric_array(metric_idx).fromTable ||' ' || metric_array(metric_idx).whereClause ||')';
      dbms_output.put_line(query_body);
      metric_idx := metric_array.next(metric_idx);

      BEGIN
        EXECUTE IMMEDIATE query_body;
        EXCEPTION
        WHEN OTHERS THEN dbms_output.put_line('Executing query for metric '||metric_array(metric_idx).label||' failed!! Query:    ' || query_body );
        raise;
      END;
      end loop;
    end;

    BEGIN

      -- Get latest date of dataload -------------
      SELECT max(REPORT_DATE_EST) report_date INTO v_storedate FROM DHC_BCK_REPORTING_BY_ENV;
      -------------------------------------------------------------------
      --  Server metrics
      -------------------------------------------------------------------
      -- metric array contains labels and where clauses -------------
      metric_server(1).label := 'totalincmdb';
      metric_server(1).fromTable := srcUnifiedBck;
      metric_server(1).whereClause := '';
--
      metric_server(2).label := 'backedup';
      metric_server(2).fromTable := srcUnifiedBck;
      metric_server(2).whereClause := 'where lower(has_backup_in_last_24hrs)=''yes''';
--
      metric_server(3).label := 'withoutbackup';
      metric_server(3).fromTable := srcUnifiedBck;
      metric_server(3).whereClause := 'where lower(has_backup_in_last_24hrs)=''no'' and lower(has_backup_information)=''yes''';
--
--       -- REQUIRED metric -------------
      metric_server(4).label := 'requiredcmdb';
      metric_server(4).fromTable := srcUnifiedBck;
      metric_server(4).whereClause := 'where lower(require_backup)=''yes''';
--
      metric_server(5).label := 'required_scheduled_cmdb';
      metric_server(5).fromTable := srcUnifiedBck;
      metric_server(5).whereClause := 'where lower(require_backup)=''yes'' and lower(has_backup_information)=''yes''';
--
      metric_server(6).label := 'required_not_scheduled_cmdb';
      metric_server(6).fromTable := srcUnifiedBck;
      metric_server(6).whereClause := 'where lower(require_backup)=''yes''  and lower(has_backup_information)=''no'' and (lower(BACKUP_METHOD)!=''snapshot'' and lower(backup_method)!=''netapp snapshot'' and lower(backup_method)!=''as400 brms'')';
--
      metric_server(7).label := 'required_netapp';
      metric_server(7).fromTable := srcUnifiedBck;
      metric_server(7).whereClause := 'where lower(require_backup)=''yes'' and (lower(BACKUP_METHOD)=''snapshot'' or lower(backup_method)=''netapp snapshot'') and lower(has_backup_information)=''no''';
--
--       -- NOT REQUIRED metric -------------
      metric_server(8).label := 'not_required';
      metric_server(8).fromTable := srcUnifiedBck;
      metric_server(8).whereClause := 'where lower(require_backup)=''no''';
--
      metric_server(9).label := 'not_required_scheduled';
      metric_server(9).fromTable := srcUnifiedBck;
      metric_server(9).whereClause := 'where lower(require_backup)=''no'' and lower(has_backup_information)=''yes''';
--
      metric_server(10).label := 'not_required_not_scheduled';
      metric_server(10).fromTable := srcUnifiedBck;
      metric_server(10).whereClause := 'where lower(require_backup)=''no'' and lower(has_backup_information)=''no''';
--
--       -- ONBOARDED metric -------------
      metric_server(11).label := 'requiredunknown';
      metric_server(11).fromTable := srcUnifiedBck;
      metric_server(11).whereClause := 'where lower(require_backup)=''unknown''';
--
      metric_server(12).label := 'required_unknown_scheduled';
      metric_server(12).fromTable := srcUnifiedBck;
      metric_server(12).whereClause := 'where lower(require_backup)=''unknown'' and lower(has_backup_information)=''yes''';
--
      metric_server(13).label := 'required_unknown_not_scheduled';
      metric_server(13).fromTable := srcUnifiedBck;
      metric_server(13).whereClause := 'where lower(require_backup)=''unknown''  and lower(has_backup_information)=''no''';
--
--       -- GIO metric -------------
      metric_server(14).label := 'giomanaged';
      metric_server(14).fromTable := srcUnifiedBck;
      metric_server(14).whereClause := 'where lower(SERVER_HCL_RU_COUNT)=''yes''';
--
      metric_server(15).label := 'gionotmanaged';
      metric_server(15).fromTable := srcUnifiedBck;
      metric_server(15).whereClause := 'where lower(SERVER_HCL_RU_COUNT)=''no''';
--
      metric_server(16).label := 'gionotspecified';
      metric_server(16).fromTable := srcUnifiedBck;
      metric_server(16).whereClause := 'where lower(SERVER_HCL_RU_COUNT)=''unknown''';
--
      -- Miscelaneous metrics -------------
      -- Not in CMDB metric is implemented only as a metric on frontend - simple count query
      -- Data discrepancies metric is implemented separately
      metric_server(17).label := 'as400';
      metric_server(17).fromTable := srcUnifiedBck;
      metric_server(17).whereClause := 'where lower(backup_method)=''as400 brms'' and lower(require_backup)!=''no''';
--
      metric_server(18).label := 'netappsnapshots';
      metric_server(18).fromTable := srcUnifiedBck;
      metric_server(18).whereClause := 'where (lower(BACKUP_METHOD)=''snapshot'' or lower(backup_method)=''netapp snapshot'')';
--
--       -- Latest Jobs -------------
      metric_server(19).label := 'success_jobs';
      metric_server(19).fromTable := srcUnifiedBck;
      metric_server(19).whereClause := 'where lower(LAST_JOB_STATUS) =''success''
                                         and start_time_est >= trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss''))
                                         and start_time_est < (trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'')) + 1) ';
--
      metric_server(20).label := 'inprogressjobs';
      metric_server(20).fromTable := srcUnifiedBck;
      metric_server(20).whereClause := 'where (lower(LAST_JOB_STATUS) =''in progress'' or lower(LAST_JOB_STATUS) =''waiting'') and lower(HAS_BACKUP_INFORMATION) =''yes''
                                           and start_time_est >= trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss''))
                                           and start_time_est < (trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'')) + 1) ';
--
      metric_server(21).label := 'failedjobs';
      metric_server(21).fromTable := srcUnifiedBck;
      metric_server(21).whereClause := 'where lower(LAST_JOB_STATUS) =''fail'' and lower(HAS_BACKUP_INFORMATION) =''yes''
                                       and start_time_est >= trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss''))
                                       and start_time_est < (trunc(TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'')) + 1) ';
--
      metric_server(22).label := 'islongrunning';
      metric_server(22).fromTable := srcUnifiedBck;
      metric_server(22).whereClause := 'where lower(IS_LONG_RUNNING) =''yes'' and lower(HAS_BACKUP_INFORMATION) =''yes''';
--
      metric_server(23).label := 'chronicfail';
      metric_server(23).fromTable := srcUnifiedBck;
      metric_server(23).whereClause := 'where lower(HAS_BACKUP_IN_LAST_3_DAYS) =''no'' and lower(HAS_BACKUP_INFORMATION) =''yes'' AND  lower(backup_method)!=''as400 brms'' AND  lower(backup_method)!=''netapp snapshot''';
--
      metric_server(24).label := 'ischroniclongrunning';
      metric_server(24).fromTable := srcUnifiedBck;
      metric_server(24).whereClause := 'where lower(IS_CHRONIC_LONG_RUNNING) =''yes'' and lower(HAS_BACKUP_INFORMATION) =''yes'' AND  lower(backup_method)!=''as400 brms'' AND  lower(backup_method)!=''netapp snapshot''';
--
      metric_server(25).label := 'potentialchronicfail';
      metric_server(25).fromTable := srcUnifiedBck;
      metric_server(25).whereClause := 'where lower(HAS_BACKUP_IN_LAST_2_DAYS) =''no'' and lower(HAS_BACKUP_INFORMATION) =''yes'' AND  lower(backup_method)!=''as400 brms'' AND  lower(backup_method)!=''netapp snapshot''';
--
      metric_server(26).label := 'newlyonboarded';
      metric_server(26).fromTable := srcNonStandard;
      metric_server(26).whereClause := 'where lower(match_type) =''newly_onboarded''';
--
      metric_server(27).label := 'matched';
      metric_server(27).fromTable := srcNonStandard;
      metric_server(27).whereClause := 'where lower(match_type) =''matched''';
--
      metric_server(28).label := 'notmatched';
      metric_server(28).fromTable := srcNonStandard;
      metric_server(28).whereClause := 'where lower(match_type) =''not_matched''';


      process_metrics(metric_server);

      --Overall Success Rate metric
      overall_success_rate_query := 'insert into server_with_backups_by_env(labelid, numericvalue, report_date,  environment, business_class, gxp )
                                    (
                                      select ''succ_rate'' as labelid, round(((a.numericvalue / (b.numericvalue + a.numericvalue))*100),2) as numericvalue, a.report_date, a.environment, a.business_class, a.gxp
                                      from server_with_backups_by_env a, server_with_backups_by_env b
                                        where
                                          a.environment = b.environment
                                          and a.report_date = to_date('''||to_char(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'')
                                          and a.report_date = b.report_date
                                          and a.business_class = b.business_class
                                          and a.gxp = b.gxp
                                          and (b.numericvalue + a.numericvalue) > 0
                                          and a.labelid = ''backedup''
                                          and b.labelid = ''withoutbackup''
                                    )';
      begin
        execute immediate overall_success_rate_query;
        exception
        when others then dbms_output.put_line('Executing query for metric ''succ_rate'' failed!! Query:    ' || overall_success_rate_query );
        raise;

      end;
      -- DATA DISCREPANCIES is a separate metric that is not applicable for the queries above - different way of computing
      data_discr_query :=
      'insert into SERVER_WITH_BACKUPS_BY_ENV ( labelid,numericvalue,report_date,  environment,  business_class, gxp)
        (SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           environment,
           business_criticality,
           lower(gxp)
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY business_criticality, gxp, environment
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           ''all''                                                  AS environment,
           business_criticality,
           lower(gxp)
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY business_criticality, gxp
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           environment,
           ''all''                                                  AS business_criticality,
           lower(gxp)
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY gxp, environment
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           environment,
           business_criticality,
           ''all''                                                  AS gxp
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY business_criticality, environment
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           ''all''                                                  AS environment,
           ''all''                                                  AS business_criticality,
           lower(gxp)
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY gxp
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           ''all''                                                  AS environment,
           business_criticality,
           ''all''                                                  AS gxp
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY business_criticality
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           environment,
           ''all''                                                  AS business_criticality,
           ''all''                                                  AS gxp
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )

         GROUP BY environment
         UNION
         SELECT
           ''data_discrepancies''                                  AS label,
           count(*)                             AS totalcount,
           TO_DATE('''||TO_CHAR(v_storedate,'YYYY-MM-DD hh24:mi:ss')||''',''YYYY-MM-DD hh24:mi:ss'') AS report_date,
           ''all''                                                  AS environment,
           ''all''                                                     business_criticality,
           ''all''                                                  AS gxp
         FROM (
           select environment , gxp,business_criticality, count(server_name)
           from view_server_backups report
           group by environment, gxp, business_criticality, server_name having count(server_name) > 1
         )
        )';
      --dbms_output.put_line(data_discr_query);
      dbms_output.put_line('Executing query for metric: data_discrepancies');
      EXECUTE IMMEDIATE data_discr_query;

      delete from SERVER_WITH_BACKUPS_BY_ENV where report_date is null;

      EXCEPTION
      WHEN OTHERS THEN RAISE;
    END;
  END;

--rollback drop procedure proc_servers_with_backup
